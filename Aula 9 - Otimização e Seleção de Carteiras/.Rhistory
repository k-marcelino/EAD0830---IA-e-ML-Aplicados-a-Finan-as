vetor = c(1, 2, 3, 4, 5, 6, 7)
vetor2 = vetor + 1
vetor2
vetor = c(1, 3, 4, 5)
vetor2 = vetor + 1
library(quantstrats)
install.packages(quantstrat)
install.packages("quantstrat")
install.packages("Rtools")
install.packages("Rtools")
install.packages("devtools")
install.packages("FinancialInstrument") #if not installed
install.packages("PerformanceAnalytics") #if not installed
# next install blotter from GitHub
devtools::install_github("braverock/blotter")
# next install blotter from GitHub
devtools::install_github("braverock/blotter")
# next install quantstrat from GitHub
devtools::install_github("braverock/quantstrat")
library(quantstrat)
stock.str='AAPL' # what are we trying it on
currency('USD')
#> [1] "USD"
stock(stock.str,currency='USD',multiplier=1)
#> [1] "AAPL"
startDate="1999-12-31"
initEq=1000000
portfolio.st='macross'
account.st='macross'
initPortf(portfolio.st,symbols=stock.str)
#> [1] "macross"
initAcct(account.st,portfolios=portfolio.st, initEq=initEq)
#> [1] "macross"
initOrders(portfolio=portfolio.st)
stratMACROSS<- strategy(portfolio.st)
View(stratMACROSS)
stratMACROSS <- add.indicator(strategy = stratMACROSS, name = "SMA", arguments = list(x=quote(Cl(mktdata)), n=50),label= "ma50" )
stratMACROSS <- add.indicator(strategy = stratMACROSS, name = "SMA", arguments = list(x=quote(Cl(mktdata)[,1]), n=200),label= "ma200")
stratMACROSS <- add.signal(strategy = stratMACROSS,name="sigCrossover",arguments = list(columns=c("ma50","ma200"), relationship="gte"),label="ma50.gt.ma200")
stratMACROSS <- add.signal(strategy = stratMACROSS,name="sigCrossover",arguments = list(column=c("ma50","ma200"),relationship="lt"),label="ma50.lt.ma200")
stratMACROSS <- add.rule(strategy = stratMACROSS,name='ruleSignal', arguments = list(sigcol="ma50.gt.ma200",sigval=TRUE, orderqty=100, ordertype='market', orderside='long'),type='enter')
stratMACROSS <- add.rule(strategy = stratMACROSS,name='ruleSignal', arguments = list(sigcol="ma50.lt.ma200",sigval=TRUE, orderqty='all', ordertype='market', orderside='long'),type='exit')
View(stratMACROSS)
getSymbols(Symbols = "AAPL", src = "yahoo")
View(AAPL)
getSymbols(Symbols = "BBAS", src = "yahoo")
getSymbols(Symbols = "BBAS.SA", src = "yahoo")
getSymbols(Symbols = "BBAS3.SA", src = "yahoo")
View(BBAS3.SA)
teste = getSymbols(Symbols = c("BBAS3.SA", "ITUB4.SA"), src = "yahoo")
teste
teste[1]
quantmod::getSymbols(Symbols = "DGS10", src = "FRED")
View(DGS10)
teste = getSymbols(Symbols = "^BVSP", src = "yahoo")
View(BVSP)
?getSymbols
teste = getSymbols(c("BBAS3.SA", "PETR4.SA"), from = "2020-01-01", src = 'yahoo', auto.assign = FALSE)
teste = getSymbols("BBAS3.SA", from = "2020-01-01", src = 'yahoo', auto.assign = FALSE)
View(teste)
chart_Series(teste)
df1 <- BatchGetSymbols(tickers = ‘VALE3.SA’,first.date = ‘2016-01-01’,last.date = Sys.Date())
df1 <- BatchGetSymbols(tickers = "VALE3.SA",first.date = "2016-01-01",last.date = Sys.Date())
library(BatchGetSymbols)
install.packages("BatchGetSymbols")
library(BatchGetSymbols)
x <- 41
y <- x*4
x <- 41
y <- x*4
z <- x + y
w <- 99
r <- z + w
resultadoProduto <- x*y
r/w
v <- c(1,0,7)
v
v[2]
v[3]
v[1]
v[5]
A <- matrix(data = c(1,3,2,4),nrow = 2,ncol = 2)
A
B <- matrix(data = c(1,2,3,4),nrow = 2,ncol = 2)
B
# operacao com vetor
v
t = c(4,5,9)
t
v*t # operacao elemento a elemento
v%*%t # operacao vetorial
A*B
A%*%B #operacao matricial
A
A[2,2]
A[1,2]
A[1,]
A[,2]
length(t) # dimensao vetor
dim(A) # dimensao matriz
det(A) # determinante
solve(A) # inversa
solve(t)
precosGerdau <- Dados$GGBR4
mean(precosGerdau)
sd(precosGerdau)
max(precosGerdau)
min(precosGerdau)
plot(precosGerdau,type = "l",main = "Pre?os GERDAU")
print("Hello World")
hist(precosGerdau)
setwd("C:/Users/Gracinha/Desktop/USP/7º Semestre/EAD0830 - IA e ML Aplicados a Finanças/Aula 9 - Otimização e Seleção de Carteiras")
library(readxl)
library(PortfolioAnalytics)
library(PerformanceAnalytics)
install.packages('PortfolioAnalytics')
install.packages('PerformanceAnalytics')
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library(readxl)
library(PortfolioAnalytics)
library(PerformanceAnalytics)
cat("\f") # Limpar o console
rm(list = ls()) # Limpar todas as variaveis
setwd("C:/Users/Leandro/Desktop/Disciplinas FEA-USP/EAD 830 - IA e ML/Aula 9")
setwd("C:/Users/Gracinha/Desktop/USP/7º Semestre/EAD0830 - IA e ML Aplicados a Finanças/Aula 9 - Otimização e Seleção de Carteiras")
Acoes = read_excel("Acoes.xlsx",sheet = "Retornos")
noAcoes = ncol(Acoes) - 1 # numero de acoes (primeira coluna datas)
Retornos = Acoes[1:1236,] # divisao com base nos dados
RetornosFora = Acoes[1237:1935,]
Retornos = xts(Retornos[,2:(noAcoes+1)], as.Date(Retornos$Data, format = "%d/%m/%Y"))
RetornosFora = xts(RetornosFora[,2:(noAcoes+1)], as.Date(RetornosFora$Data, format = "%d/%m/%Y"))
fund.names = colnames(Retornos) # nome dos ativos
carteira = portfolio.spec(assets = fund.names) # criando a carteira
carteira = add.constraint(portfolio = carteira, type = "full_investment")
carteira = add.constraint(portfolio = carteira, type = "long_only")
carteira = add.objective(portfolio = carteira, type = "risk", name = "StdDev")
MinhaCarteira = optimize.portfolio(R = Retornos,portfolio = carteira,optimize_method = "ROI",trace = TRUE)
MinhaCarteira # informacoes da carteira
